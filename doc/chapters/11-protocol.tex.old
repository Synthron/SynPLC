\newpage
\subsection{Protokoll}
Das Protokoll, welches über die RS485-Physik geht, ist relativ einfach, aber praktisch aufgebaut. Es bietet die Möglichkeit, den Bus zu scannen um zu schauen, ob alle vorgegebenen Teilnehmer vorhanden sind, sowie Daten zu lesen und zu schreiben. Betrieben wird der Bus auf 250.000 Baud.

Aufgebaut ist es wie ein Single-Master Bus, bei dem allerdings die CPU alles organisiert. Die eingebetteten Funktionen sind im Nachfolgenden einzeln erklärt.

Dabei ist zu bedenken, dass alle Befehle in den Slaves Register schreiben. Die Register werden nach dem Datentransfer in den Slaves ausgelesen und entsprechend verarbeitet. Eine Register-Map liegt jedem Modul der V1 bei.

\subsubsection{Error-Meldungen}
Um sicherzustellen, dass die CPU zwischen verschiedenen Fehlern unterscheiden kann, werden hier die Error-Codes definiert, die die Module unter sich senden können. 
\begin{table}[h]
    \centering
\begin{tabular}{|c|c|}
    \hline
    Fehlercode  &       Bedeutung \\ \hline \hline
    0xF1        &       Block-Write Overflow \\ \hline
    0xF2        &       Byte Read Error \\ \hline
    0xF3        &       Word Read Error \\ \hline
    0xF4        &       011X XXXX \\ \hline
    0xF5        &       100X XXXX \\ \hline
    0xF6        &       101X XXXX \\ \hline
    0xF7        &       110X XXXX \\ \hline
    0xFF        &                 \\ \hline
\end{tabular}
\caption{Fehlermeldungen CPU}
\label{tab:Fehlermeldungen CPU}
\end{table}

\subsubsection{Scan/Ping}
Um zu schauen, ob ein Teilnehmer auf einer Adresse allgemein anwesend ist, kann man den Ping-Command senden. Dieser dient auch dazu, am Anfang den Bus zu überprüfen, ob alle notwendigen (einprogrammierten) Slaves verfügbar sind.

\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{pictures/ping_protocol.png}
    \caption{Ping-Befehl}
    \label{img:Ping}
\end{figure}

Sobald der Master mit dem Senden des Befehls fertig ist, muss die Antwort nach spätestens 5ms angekommen sein. Ist dies nicht der Fall, so wird im Error-Register die entsprechende Flag gesetzt und das System geht in die Error-Routine.

\subsubsection{Register Write Byte}
Um ein 8bit-Register zu schreiben, sendet man nach der Slave-Adresse das Command-Byte 0x11, gefolgt von der Registernummer und den Daten. Dabei muss es sich um einen 8bit-Wert handeln. Als Acknowledge sendet der Slave den Wert an die CPU zurück.

\subsubsection{Register Write Word}
Um ein 16bit-Register zu schreiben, sendet man nach der Slave-Adresse das Com-mand-Byte 0x12, gefolgt von der Registernummer und den Daten. Dabei muss es sich um einen 16bit-Wert handeln. Als Acknowledge sendet der Slave das Low-Byte an die CPU zurück.

\subsubsection{Register Write Block}
Um mehrere aufeinanderfolgende register zu schreiben, sendet man nach der Slave-Adresse das Command-Byte 0x13, gefolgt von dem Start-Register und den Daten. Dabei werden die High-Bytes stehts zuerst gesendet, sollte es sich um Wörter statt Bytes handeln. Als Acknowledge sendet der Slave die Anzahl an Bytes, die geschrieben wurden, zurück.

Sollte der Slave nicht in der Lage sein, alle Bytes in Register zu schreiben, so werden die Register gefüllt und nachfolgende Bytes verworfen. Sobald der Master aufgehört hat zu senden, meldet der Slave den Error-Code 0xF1 an die CPU zurück.

\subsubsection{Register Read Byte}
Um ein 8bit-Register zu lesen, sendet man nach der Slave-Adresse das Command-Byte 0x21, gefolgt von der Registernummer. Der Slave antwortet nach 1ms mit dem Wert des Registers. Ein Acknowledge von Seiten der CPU gibt es nicht. 

Sollte es dem Slave nicht möglich sein, aus dieser Registernummer zu lesen, so sendet er den Error-Code 0xF2

\subsubsection{Register Read Word}
Um ein 16bit-Register zu lesen, sendet man nach der Slave-Adresse das Command-Byte 0x22, gefolgt von der Registernummer. Der Slave antwortet nach 1ms mit dem Wert des Registers. Ein Acknowledge von Seiten der CPU gibt es nicht. 

Sollte es dem Slave nicht möglich sein, aus dieser Registernummer zu lesen, so sendet er den Error-Code 0xF3